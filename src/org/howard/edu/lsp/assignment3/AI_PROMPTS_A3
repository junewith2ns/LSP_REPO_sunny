# AI Prompts — Ass 3

## Prompt 1

“Help brainstorm how to reevaluate my Ass 2 ETL screenshots and word doc attached into an OO structure. I want separate classes for extract, transform, and load, and simple  classes but maintain similar behavior and output.”

AI excerpt: 

You can split your ETL pipeline into clear OO classes while keeping the same behavior/output:

Product → raw row (id, name, price, category).

TransformedProduct → extends Product, adds priceRange + toCsvRow().

CSVExtractor → reads products.csv, returns List<Product>, counts skipped rows.

Transformer → runs the 4 steps (uppercase, discount, recategorize, priceRange).

CSVLoader → writes header + transformed rows to transformed_products.csv.

ETLPipeline (main) → orchestrates extract → transform → load and prints summary.

This design makes each class responsible for a single task (encapsulation), allows reuse/testing, and uses inheritance (TransformedProduct). Behavior stays the same as Assignment 2 but structure is more OO.

## Prompt 2
I am pasting my csv extractor code. Let me know if there are any bugs or efficiencies I can improve.

AI excerpt:
Quick audit of your CSVExtractor:

✅ Uses relative path, tries to open data/products.csv.

✅ Skips header, skips blank/malformed lines, counts skippedCount.

✅ Catches NumberFormatException.

✅ Resets skippedCount each run.

✅ Exposes getSkippedCount().

Most common bugs I’ve seen (and how to check them):

Wrong file location (most frequent): data/products.csv sitting under src/.../data/ instead of repo root.

Fix: ensure path is project-root/data/products.csv.

Working directory mismatch: running from an IDE where CWD isn’t project root → file “missing”.

Fix: set run working dir = project root.

Header-only file: you expect rows but get 0 — that’s correct behavior; loader should still write just the header.

Confirm by printing rowsRead and checking transformed_products.csv has only the header.

Trailing blank lines: they count as skipped (by design).

If that surprises you, trim the file or tolerate trailing blanks (your code already does).

Otherwise, your code is functioning great.

## Prompt 3
As per the word doc isntructions I am supposed to create a transformed products csv. this was the previous products csv in data. Does the transformed contain the same content?

AI excerpt:
I see what you’re asking — your **input file** is `products.csv` (the screenshot with Book, Laptop, Notebook, etc.), and your program is supposed to generate **`transformed_products.csv`** after applying all the ETL rules (uppercase names, electronics discount, recategorization, and price range).

➡️ The transformed file will contain the *same rows as products.csv but modified* according to the instructions.

### Explanation of changes:

* Names → **UPPERCASE**.
* Electronics → **10% discount applied** (e.g., Laptop 999.99 → 900.00).
* If discounted price > 500 and category = Electronics → **recategorized to Premium Electronics** (Laptop, Smartphone).
* Price range assigned:

  * Book = 12.99 → Medium
  * Laptop = 900.00 → Premium
  * Notebook = 2.49 → Low
  * Headphones = 180.00 → High
  * Pencil = 0.99 → Low
  * Smartphone = 629.54 → Premium

So the output has the *same rows as input*, but with **transformed fields + an extra column**.

👉 Would you like me to walk you through how to quickly confirm your code produces this exact file (e.g., by printing `toCsvRow()` results in `main` before writing)?


